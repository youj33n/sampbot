const { VK, Keyboard } = require('vk-io') //–∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const {connection, connects, MD5} = require('./mysql.js') //–∫–æ–Ω—Ñ–∏–≥–∏ mysql
const players = require('./players.json')
const fs = require('fs')


//–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API VK
const vk = new VK()
const TOKEN = '71b6c8c10766eb7a747892b1a277f12205cf4adf687eaca15851a3206fec948ca54d47ecdb1b1403e7dc8'
//'99f69f7ddd9759e3794978222b802154c3c1ee16a66c9e2cea8b0d52ca797a3ddb9293021f07764b28bd5'
//'71b6c8c10766eb7a747892b1a277f12205cf4adf687eaca15851a3206fec948ca54d47ecdb1b1403e7dc8'
vk.setOptions({ token: TOKEN, apiMode: 'parallel' }) //–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK API
//

//–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MYSL –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
connects(connection); // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MySQL


const L_NULL = 0, //–Ω–µ –Ω–∞—á–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      L_PROCESS = 1,//–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      L_ACTIVE = 2 //–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è
//
const utils = {
    gi: (int) => {
      int = int.toString();
      let text = ``;
      for (let i = 0; i < int.length; i++)
      {
        text += `${int[i]}&#8419;`;
      }
      return text;
    },
    random: (x, y) => {
      return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x);
    },
    pick: (array) => {
      return array[utils.random(array.length - 1)];
        }
  }
setInterval(async () => {
    fs.writeFileSync("./players.json", JSON.stringify(players, null, "\t"))
}, 500);


const COLOR_BTN = { //–¶–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫
    green: Keyboard.POSITIVE_COLOR,
    blue: Keyboard.PRIMARY_COLOR,
    red: Keyboard.NEGATIVE_COLOR
}

const generalMenu = Keyboard.builder() //–∫–Ω–æ–ø–∫–∞ '–ú–µ–Ω—é'
const menu = Keyboard.builder()//–ú–µ–Ω—é —Å –∞—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π/–ø—Ä–æ–º–æ
const menu2 = Keyboard.builder()//–ú–µ–Ω—é —Å –∞—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π/–ø—Ä–æ–º–æ


//–†–µ–∑–µ—Ä–≤ –∏–º–µ–Ω–∏ –≤–≤–æ–¥–∏–º—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
const messageIs = [
    '–Ω–∞—á–∞—Ç—å', 
    '–ø—Ä–∏–≤–µ—Ç',
    '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
    '–º–µ–Ω—é',
    '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    '–Ω–∞–∑–∞–¥',
    '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '–ø—Ä–æ–≤–µ—Ä–∫–∞',
    '–≤—ã—Ö–æ–¥ —Å –∞–∫–∫–∞—É–Ω—Ç–∞'
]

vk.updates.on(['new_message'], async (next, context) => {
    if(players.filter(x => x.id === next.senderId)[0]) return context()
    players.push({
      id: next.senderId,
      name: ' ',
      password: ' '
    })
    return context()
  })

  

vk.updates.use(async (context, next) => { //–ø—Ä–æ—Å–ª—É—à–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (!context.senderId) // –ï—Å–ª–∏ –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –≤—ã–π—Ç–∏
        return;
    if (context.senderId < 0) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –ª—Å —Å –±–æ—Ç–æ–º - –≤—ã–π—Ç–∏
        return;
    if (context.isGroup) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã - –≤—ã–π—Ç–∏
        return;
    if (context.is('message') && context.isOutbox) // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–µ - –≤—ã–π—Ç–∏
        return;

    let player = players.filter(x => x.id === context.senderId)[0]
    if(player.status == L_PROCESS) {
            let text = ""
            if(context.text.search(' ')) //–∏—â–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —É–¥–∞–ª—è–µ–º
                text = context.text.replace(/\s/g, '')
            else 
                text = context.text;//–ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º
                
            //let player = players.filter(x => x.id === context.senderId)[0]
            if(text.search(',')) {//–ò—â–µ–º –∑–∞–ø—è—Ç—É—é –∏ –¥–µ–ª–∏–º –Ω–∞ Name and Password
                let splitting = text.split(",")
                player.name = splitting[0]
                player.password = MD5(splitting[1]) //–ï—Å–ª–∏ –Ω–µ—Ç MD5, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—Å—Ç–æ splitting[1]
                console.log(player.name, player.password)

            } else {
                context.send(`‚ùå –í–≤–æ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (login, password)`)
                return
            } 

            connection.query('SELECT * FROM accounts WHERE NickName = ? AND Password = ?',[player.name, player.password], (err, results, fields) => {
                if(!results.length) { // –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                    player.status = L_NULL
                    return context.send({message: `‚ùå–¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`, keyboard: menu});
                }
                //–ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω
                player.name = results[0].NickName //NickName –ø–æ–ª–µ –∏–º–µ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ BD
                if(results[0].NickName == player.name) {
                    context.send({message: `‚úÖ–¢—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ ${results[0].NickName}`, keyboard: menu2})
                    player.status = L_ACTIVE
                }
            })
    }//üöÄ‚úÖ
    
    if(messageIs.indexOf(context.text.toLowerCase()) != -1 ||  player.status == L_PROCESS ) 
        await next()
    else 
        context.send({message: `üëÄ–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é..\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é`, keyboard: generalMenu});
});

vk.updates.hear(/–≤—ã—Ö–æ–¥ —Å –∞–∫–∫–∞—É–Ω—Ç–∞$/i, async msg => {
    let player = players.filter(x => x.id === msg.senderId)[0]
    player.status = L_NULL
    player.name = " "
    player.password = " "
    msg.send({message: `–í—ã –≤—ã—à–ª–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞`, keyboard: menu});
})
vk.updates.hear(/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$/i, async msg => {
    let player = players.filter(x => x.id === msg.senderId)[0]
    if(player.status != L_ACTIVE) 
        return msg.send({message: `–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!`, keyboard: menu});
    
    connection.query(
        'SELECT * FROM accounts WHERE NickName = ?',
        [player.name], 
        async (err, results, fields) => {

            const JOB_NAME = [
                "–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π",
                "–í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–±—É—Å–∞",
                "–î–µ—Ç–µ–∫—Ç–∏–≤",
                "–†–∞–∑–≤–æ–∑—á–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                "–ú–µ—Ö–∞–Ω–∏–∫",
                "–¢–∞–∫—Å–∏—Å—Ç",
                "–ê–¥–≤–æ–∫–∞—Ç",
                "–§–µ—Ä–º–µ—Ä",
                "–ö—Ä—É–ø—å–µ",
                "–ò–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä",
                "–ù–∞—Ä–∫–æ–¥–∏–ª–ª–µ—Ä",
                "–î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫",
                "–†–∞–∑–≤–æ–∑—á–∏–∫ –ø–∏—Ü—Ü—ã",
                "–†–∞–∑–≤–æ–∑—á–∏–∫ –º–µ—Ç–∞–ª–ª–æ–ª–æ–º–∞",
                "–ú—É—Å–æ—Ä—â–∏–∫",
                "–ì—Ä—É–∑—á–∏–∫",
                "–†–∞–±–æ—Ç–Ω–∏–∫ –ù–∞–ª–æ–≥–æ–≤–æ–π",
                "–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ñ–µ—Ä–º–µ—Ä",
                "–¢—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç",
                "–ö–æ–º–±–∞–π–Ω–µ—Ä",
                "–í–æ–¥–∏—Ç–µ–ª—å –∫—É–∫—É—Ä—É–∑–Ω–∏–∫–∞",
                "–°—Ç—Ä–æ–∏—Ç–µ–ª—å"
            ]
            const FRAC_NAME = [
                "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π",
                "–ü–æ–ª–∏—Ü–∏—è LS",
                "RCPD",
                "FBI",
                "–ü–æ–ª–∏—Ü–∏—è SF",
                "–ë–æ–ª—å–Ω–∏—Ü–∞ LS",
                "–ë–æ–ª—å–Ω–∏—Ü–∞ LV",
                "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                "–ê—Ä–º–∏—è LV",
                "–ë–æ–ª—å–Ω–∏—Ü–∞ SF",
                "–õ–∏—Ü–µ–Ω–∑–µ—Ä—ã",
                "Radio LS",
                "Grove",
                "Vagos",
                "Ballas",
                "Aztecas",
                "Rifa",
                "Russian Mafia",
                "Yakuza",
                "La Cosa Nostra",
                "Warlock MC",
                "–ê—Ä–º–∏—è LS",
                "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ë–∞–Ω–∫",
                "–ü–æ–ª–∏—Ü–∏—è LV",
                "Radio LV",
                "Night Wolfs",
                "Radio SF",
                "–ê—Ä–º–∏—è SF"
            ]
            if(results[0].NickName == player.name) {
                await msg.sendPhotos({ value: `https://sampik.ru/uploads/idskins/id${results[0].Skin}.png` })
                await msg.send({message: 
                `üöÄ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ${player.name}:

                –£—Ä–æ–≤–µ–Ω—å: ${results[0].Level}
                –û–ø—ã—Ç: ${results[0].Exp}/${(results[0].Level + 1) * 4}
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${results[0].TelNum}

                –†–∞–±–æ—Ç–∞: ${JOB_NAME[results[0].Job]}
                –ù–∞—Ä–∫–æ—Ç–∏–∫–∏: ${results[0].Drugs} –≥—Ä.
                –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${results[0].Mats} —à—Ç.

                –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${FRAC_NAME[results[0].Member]}

                `
                , keyboard: menu2});
                
                
                
        }
    });
});

vk.updates.hear(/^–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$/i, async msg => {
    await msg.send({message: 
    `–ë–æ—Ç –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞\n–¢–∞–∫ –∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã.`, 
        keyboard: generalMenu});
});
vk.updates.hear(/^(?:–Ω–∞—á–∞—Ç—å|–ø—Ä–∏–≤–µ—Ç)$/i, async msg => {
    await msg.send({message: `–ü—Ä–∏–≤–µ—Ç, ${await getName(msg.senderId)}!`, keyboard: generalMenu});
});
vk.updates.hear(/^–Ω–∞–∑–∞–¥$/i, async msg => {
    await msg.send({message: `–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é`, keyboard: generalMenu});
});
vk.updates.hear(/^–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è$/i, async msg => {
    let player = players.filter(x => x.id === msg.senderId)[0]
    if(player.status == L_ACTIVE) 
        return msg.send({message: `–¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!`, keyboard: menu2})

    await msg.send({message: `${await getName(msg.senderId)}\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:`})
    player.status = L_PROCESS
});
vk.updates.hear(/^–º–µ–Ω—é$/i, async msg  => {
    await msg.send({message: `–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö:`, keyboard: menu});
});





menu2.oneTime()
    .textButton({
        label: `–í—ã—Ö–æ–¥ —Å –∞–∫–∫–∞—É–Ω—Ç–∞`,
        color: COLOR_BTN.green
    })
    .textButton({
        label: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`,
        color: COLOR_BTN.blue
    })
    .row()
    .textButton({
        label: `–ù–∞–∑–∞–¥`,
        color: COLOR_BTN.red
    })
    .row()

menu.oneTime()
    .textButton({
        label: `–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`,
        color: COLOR_BTN.green
    })
    .textButton({
        label: `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`,
        color: COLOR_BTN.blue
    })
    .row()
    .textButton({
        label: `–ù–∞–∑–∞–¥`,
        color: COLOR_BTN.red
    })
    .row()


generalMenu.oneTime()
    .textButton({
		label: `–ú–µ–Ω—é`,
		color: COLOR_BTN.green
	})
    .textButton({
		label: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`,
		color: COLOR_BTN.blue
	})
    .row()

let getName = async (id) => {
    const response = await vk.api.users.get({
        user_ids: id
    });
    return response[0].first_name;
}

vk.updates.start(console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));